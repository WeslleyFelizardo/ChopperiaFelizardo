@model ChopperiaFelizardo.Models.OrderViewModels.IndexViewModel

@{
    
    ViewData["Title"] = "Index";
}

<div class="panel panel-primary">
    <div class="panel-heading">
        <h3 class="panel-title">Adicionar itens</h3>
    </div>
    <div class="panel-body">
        <form>
            <div class="row">
                <div class="col-md-4">
                    <div class="form-group">
                        <label for="order">Comandas</label>
                        <select asp-for="OrderID" class="form-control" asp-items="@Model.Orders">
                            <option value="-1" selected>Todos as comandas</option>
                        </select>
                       
                    </div>
                </div><!-- /.col-lg-6 -->
               
                <div class="col-sm-1">
                    
                            <label>a</label>
                            <button id="new" type="button" class="btn btn-info" onclick="swalAlertNewOrder()">
                                <span class="glyphicon glyphicon-plus" aria-hidden="true"></span>
                            </button>                       
                    
                </div><!-- /.col-lg-6 -->
                <div class="col-sm-1">

                    <label>a</label>
                    <button id="cancel" type="button" onclick="swalAlertCancelOrder()" class="btn btn-danger">
                        <span class="glyphicon glyphicon-trash" aria-hidden="true"></span>
                    </button>
                </div><!-- /.col-lg-6 -->

                <div class="col-sm-1">

                    <label>a</label>
                    <button id="edit" type="button" onclick="swalAlertEditNameOrder()" class="btn btn-default">
                        <span class="glyphicon glyphicon-pencil" aria-hidden="true"></span>
                    </button>
                </div><!-- /.col-lg-6 -->

            </div>


            <div class="row">
                <div class="col-md-8">
                    <div class="input-group">
                        
                        <input type="text" id="nameProduct" class="form-control" placeholder="Informe um produto">
                        <span class="input-group-btn">
                            <button type="button" class="btn btn-default" data-toggle="modal" data-target=".bs-example-modal-lg">
                                <span class="glyphicon glyphicon-search" aria-hidden="true"></span>
                            </button>
                        </span>
                    </div><!-- /input-group -->
                </div><!-- /.col-lg-6 -->
            </div><!-- /.row -->
            <br />
            <div class="row">
                <div class="col-md-2">
                    <div class="form-group">
                        <label for="amount">Quantidade</label>
                        <input type="number" min="1" max="10" class="form-control" id="amount" placeholder="Quantidade">
                    </div>
                </div><!-- /.col-lg-6 -->

                <div class="col-md-2">
                    <div class="form-group">
                        <label for="price">Preco Unitario</label>
                        <input type="text" class="form-control" id="price" placeholder="Preco Unitario">
                    </div>
                </div><!-- /.col-lg-6 -->
            </div><!-- /.row -->
            <br />
            <div class="text-center">
                <button id="add" class="btn btn-success">Adicionar</button>
                <button class="btn btn-danger">Cancelar</button>
            </div>
            @*<div class="row">
                <div class="col-md-5"></div>
                <div class="col-md-1">
                    <div class="form-group">
                        <button class="btn btn-success">Adicionar</button> | 
                    </div>
                </div><!-- /.col-lg-6 -->
                
                <div class="col-md-2">
                    <div class="form-group">
                        <button class="btn btn-danger">Cancelar</button>
                    </div>
                </div><!-- /.col-lg-6 -->
            </div>*@
        </form>
    </div>
    
</div>
<br />

<div>
    <a asp-controller="Boxes" asp-action="Receiving" asp-route-identifier="@Model.Identifier" class="btn btn-default">Finalizar Pedido</a>
    <a onclick="swalAlertReleaseTable()" class="btn btn-default">Liberar Mesa</a>
</div>

<div class="pull-right">
<h3>Total: <span class="label label-warning money" id="total" >@Model.Total</span></h3>
</div>
<br />

<div class="panel panel-primary">
    <div class="panel-heading">
        <h3 class="panel-title">Consumo</h3>
    </div>
    <div class="panel-body">
        <table class="table" id="items">
            <thead>
                <tr>
                    <th>Codigo</th>
                    <th>Nome</th>
                    <th>Preco.Unit</th>
                    <th>Qtd</th>
                    <th>SubTotal</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model.Items)
                {
                    <tr>
                        <td>@item.ID</td>
                        <td>@item.Product.Name</td>
                        <td>@item.Product.PriceSell</td>
                        <td>@item.Amount</td>
                        <td>@(@item.Amount * @item.Product.PriceSell)</td>
                        <th>
                            <a class="btn btn-danger" onclick="deleteItem(@item.ID)">
                                <span class="glyphicon glyphicon-trash" aria-hidden="true"></span>
                            </a>
                        </th>
                    </tr>
                }
               
            </tbody>
        </table>
    </div>

</div>


<!-- Large modal -->


<div class="modal fade bs-example-modal-lg" tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">        
                
                   @await Component.InvokeAsync("DataTable", new { entity = Model.ShowViewModel.GetType(), nameComponent = "Teste" })
        </div>

     </div>
</div>

<div class="modal fade bs-example-modal-sm" tabindex="-1" role="dialog" aria-labelledby="mySmallModalLabel">
    <div class="modal-dialog modal-sm" role="document">
        <div class="modal-content">
            <br />
            <form asp-action="Create">
                <div class="form-group">
                    <label asp-for="Name" class="col-md-1 control-label"></label>
                    @*<div class="col-md-10">*@
                        <input asp-for="Name" class="form-control" />
                        <span asp-validation-for="Name" class="text-danger"></span>
                    @* </div> *@
                </div>
              
                <div class="form-group text-center">                   
                        <button type="submit" class="btn btn-success">Adicionar</button>                    
                </div>
            </form>
        </div>
    </div>
</div>
<script type="text/javascript" src="~/lib/jquery/dist/jquery.js"></script>
<script type="text/javascript">

    $(document).ready(function () {
        enableControls();
    });

    function getItems(id) {
        fetch('/Orders/Json/' + id) // URL de destino.
            .then(response => { // 'response' possui todas informações da resposta.
                if (response.ok) { // Bool para checar a respota.
                    return response.json(); // É necessário transformar o 'body' para json, para que possa ser manipulado
                }
            })
            .then(data => { // Recebe o 'data' em formato json.
                generateRows(data);
            })
            .catch(err => { // Recebe um objeto contendo as informações do erro.
                console.log(err.message);
            });

    }

    $("select[name=OrderID]").change(function () {
        if (this.value == -1) {
            $('#add').attr("disabled", true);
            $('#cancel').attr("disabled", true);
            $('#edit').attr("disabled", true);
        }
        else {
            $('#add').attr("disabled", false);
            $('#cancel').attr("disabled", false);
            $('#edit').attr("disabled", false);
        }
        getItems(this.value);
    });

    function generateRows(datas) {
        $('table tr').each(function (indice) {
            if (indice > 0) {
                $(this).remove();
            }
        });

        $.each(datas.datas, function (index, value) {

            var newRow = $("<tr>");
            var cols = "";

            cols += '<td>' + value.id + '</td>';
            cols += '<td>' + value.name + '</td>';
            cols += '<td>' + parseFloat(value.price).toFixed(2).toString().replace('.', ',') + '</td>';
            cols += '<td>' + value.amount + '</td>';
            cols += '<td>' + parseFloat(value.price * value.amount).toFixed(2).toString().replace('.', ',') + '</td>';

            cols += '<td>';
            cols += '<a  class="btn btn-danger" onclick="deleteItem('+value.id+')">' + '<span class="glyphicon glyphicon-trash" aria-hidden="true"' +
                '></span></a>';
            cols += '</td>';



            newRow.append(cols);
            $("#items").append(newRow);

        });
        //datas.total = parseFloat(datas.total).toFixed(2);
        $("#total").html(datas.total);
    }

    function addItem() {
        //Fazer um requisição post para adicionar um novo item, e atualizar a tabela de itens

    }

    function deleteItem(id) {
        swal({
            title: "Deseja realmente remover esse pedido?",
            text: "Ao confirmar o pedido será removido",
            type: "warning",
            showCancelButton: true,
            closeOnConfirm: false,
            //showLoaderOnConfirm: true,
            closeOnConfirm: true
        },
            function () {
                $.ajax({
                    type: 'post',
                    url: '/Items/Delete',
                    data: { id: id },
                    success: function (datas) {
                        notify("Item removido com sucesso", "sucesso");
                        getItems($('#OrderID').val());
                    },
                    error: function (eror) {
                        notify("Não foi possivel remover esse item");
                    }
                });
            });
     
    }

    function removeOrder() {
        var idOrder = $("#OrderID option:selected").val();

        $.ajax({
            type: 'put',
            url: '/Orders/CancelOrder',
            data: { id: idOrder },
            success: function (datas) {
                refreshDropDownOrder(datas);
            }
        });
    }

    function refreshDropDownOrder(datas) {
        $("#OrderID").empty();
        var firstOption = new Option('Todos as comandas', '-1');
        $("#OrderID").append(firstOption);
        $.each(datas.result, function (index, value) {
            var option = new Option(value.name, value.id);
            $("#OrderID").append(option);
        });
        enableControls();
        getItems(-1);

    }

    function releaseTable(password) {
        var result = 0;
        $.ajax({
            type: 'post',
            url: '/Tables/ReleaseTable',
            data: { password: password },
            async: false,
            success: function (datas) {
                result = datas;
            },
            error: function () {
                result = -1;
            }
        });

        return result;
    }

    function editNameOrder(newName) {
        $.ajax({
            type: 'post',
            url: '/Orders/EditNameOrder',
            data: { id: $("#OrderID").val(), newName: newName },
            success: function (datas) {
                refreshDropDownOrder(datas);
                //getItems(-1);
            }
        });
    }

    function enableControls() {
        $('#add').attr('disabled', true);
        $('#cancel').attr('disabled', true);
        $('#edit').attr('disabled', true);
    }

    function swalAlertCancelOrder() {
        swal({
            title: "Deseja realmente cancelar essa comanda?",
            text: "Ao confirmar o cancelamento essa comando não poderá mais ser usada!",
            type: "warning",
            showCancelButton: true,
            closeOnConfirm: false,
            showLoaderOnConfirm: true,
        },
            function () {
                setTimeout(function () {
                    removeOrder();
                    swal("Comanda cancelada com sucesso!");
                }, 2000);
            });

    }

    function swalAlertReleaseTable() {
     swal({
            title: "Informe a senha do sistema!",
            text: "Para liberar uma mesa tendo ainda comandas abertas, você deverá informar a senha do sistema, posteriormente todas as comandas dessa mesa serão canceladas",
            type: "input",
            showCancelButton: true,
            closeOnConfirm: false,
            animation: "slide-from-top",
            inputPlaceholder: "Write something"
        },
            function (inputValue) {
                if (inputValue === false) return false;

                if (inputValue === "") {
                    swal.showInputError("Campo obrigatório!");
                    return false;
                }

                var result = releaseTable(inputValue);

                if (result == 0) {
                    swal.showInputError("Senha invalida");
                    return false;
                }
                else if (result == -1) {
                    sweetAlert("Houve um erro...", "Erro ao tentar acessar o servidor, contate o suporte", "error");
                }
                else if (result == 1) {
                    sweetAlert("Houve um erro...", "Erro interno no servidor, contate o suporte", "error");
                }
                else {
                    swal("Mesa liberada com sucesso!", "A mesa foi liberada e todas as comandas foram canceladas", "success");
                    setTimeout(function () {
                        window.location = "http://localhost:59336/Tables/DisplayTables";
                    }, 5000);
                        
                    
                }
            });

    }

    function swalAlertEditNameOrder() {
        swal({
            title: "Editar o nome da comanda!",
            text: "Digite o novo valor para substituir apenas o nome da comanda",
            type: "input",
            showCancelButton: true,
            closeOnConfirm: true,
            animation: "slide-from-top",
            inputPlaceholder: ""
        },
            function (inputValue) {
                if (inputValue === false) return false;

                if (inputValue === "") {
                    swal.showInputError("O campo é obrigatório!");
                    return false
                }

                editNameOrder(inputValue);
                //swal("Nice!", "You wrote: " + inputValue, "success");
            });

    }

    function swalAlertNewOrder() {
        swal({
            title: "Adicione uma nova comanda!",
            text: "Digite o novo valor para ser o nome da nova comanda",
            type: "input",
            showCancelButton: true,
            closeOnConfirm: false,
            animation: "slide-from-top",
            inputPlaceholder: ""
        },
            function (inputValue) {
                if (inputValue === false) return false;

                if (inputValue === "") {
                    swal.showInputError("O campo é obrigatório!");
                    return false
                }

                swal.close();
                $.ajax({
                    type: 'post',
                    url: '/Orders/Create',
                    data: { name: inputValue },
                    success: function (datas) {
                        refreshDropDownOrder(datas);
                        //getItems(-1);
                    }
                });
            });


    }

    function notify(message, type) {
        $.notify(
            {
                // options
                message: message
            },
            {
                type: type,
                allow_dismiss: true,
                newest_on_top: false,
                showProgressbar: false,
                delay: 1000,
                placement: {
                    from: "top",
                    align: "right"
                },
                animate: {
                    enter: 'animated fadeInDown',
                    exit: 'animated fadeOutUp'
                }
            });
    }
</script>